// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	book "diary/book"
	user "diary/user"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: input
func (_m *Service) CreateBook(input book.CreateBookInput) (book.Book, error) {
	ret := _m.Called(input)

	var r0 book.Book
	if rf, ok := ret.Get(0).(func(book.CreateBookInput) book.Book); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(book.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.CreateBookInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBookCategory provides a mock function with given fields: input, bookID
func (_m *Service) CreateBookCategory(input book.CreateBookInput, bookID int) ([]string, error) {
	ret := _m.Called(input, bookID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(book.CreateBookInput, int) []string); ok {
		r0 = rf(input, bookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.CreateBookInput, int) error); ok {
		r1 = rf(input, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookByCategoryID provides a mock function with given fields: input
func (_m *Service) GetBookByCategoryID(input book.GetBookDetailInput) ([]book.Book, error) {
	ret := _m.Called(input)

	var r0 []book.Book
	if rf, ok := ret.Get(0).(func(book.GetBookDetailInput) []book.Book); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.GetBookDetailInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookByID provides a mock function with given fields: input
func (_m *Service) GetBookByID(input book.GetBookDetailInput) (book.Book, error) {
	ret := _m.Called(input)

	var r0 book.Book
	if rf, ok := ret.Get(0).(func(book.GetBookDetailInput) book.Book); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(book.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.GetBookDetailInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookByTitle provides a mock function with given fields: input
func (_m *Service) GetBookByTitle(input book.GetSearchBookInput) ([]book.Book, error) {
	ret := _m.Called(input)

	var r0 []book.Book
	if rf, ok := ret.Get(0).(func(book.GetSearchBookInput) []book.Book); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.GetSearchBookInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields:
func (_m *Service) GetBooks() ([]book.Book, error) {
	ret := _m.Called()

	var r0 []book.Book
	if rf, ok := ret.Get(0).(func() []book.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastReader provides a mock function with given fields: bookID, UserID
func (_m *Service) GetLastReader(bookID int, UserID int) ([]user.User, error) {
	ret := _m.Called(bookID, UserID)

	var r0 []user.User
	if rf, ok := ret.Get(0).(func(int, int) []user.User); ok {
		r0 = rf(bookID, UserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(bookID, UserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBooks provides a mock function with given fields: input
func (_m *Service) GetUserBooks(input book.GetBookDetailInput) ([]book.Book, error) {
	ret := _m.Called(input)

	var r0 []book.Book
	if rf, ok := ret.Get(0).(func(book.GetBookDetailInput) []book.Book); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.GetBookDetailInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBookfile provides a mock function with given fields: ID, fileLocation
func (_m *Service) SaveBookfile(ID int, fileLocation string) (book.Book, error) {
	ret := _m.Called(ID, fileLocation)

	var r0 book.Book
	if rf, ok := ret.Get(0).(func(int, string) book.Book); ok {
		r0 = rf(ID, fileLocation)
	} else {
		r0 = ret.Get(0).(book.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(ID, fileLocation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveImageCover provides a mock function with given fields: ID, fileLocation
func (_m *Service) SaveImageCover(ID int, fileLocation string) (book.Book, error) {
	ret := _m.Called(ID, fileLocation)

	var r0 book.Book
	if rf, ok := ret.Get(0).(func(int, string) book.Book); ok {
		r0 = rf(ID, fileLocation)
	} else {
		r0 = ret.Get(0).(book.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(ID, fileLocation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveReadHistory provides a mock function with given fields: bookID, UserID
func (_m *Service) SaveReadHistory(bookID int, UserID int) (book.History, error) {
	ret := _m.Called(bookID, UserID)

	var r0 book.History
	if rf, ok := ret.Get(0).(func(int, int) book.History); ok {
		r0 = rf(bookID, UserID)
	} else {
		r0 = ret.Get(0).(book.History)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(bookID, UserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveReview provides a mock function with given fields: input
func (_m *Service) SaveReview(input book.GetReviewBookInput) (book.Review, error) {
	ret := _m.Called(input)

	var r0 book.Review
	if rf, ok := ret.Get(0).(func(book.GetReviewBookInput) book.Review); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(book.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.GetReviewBookInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: input, bookID
func (_m *Service) UpdateBook(input book.CreateBookInput, bookID int) (book.Book, error) {
	ret := _m.Called(input, bookID)

	var r0 book.Book
	if rf, ok := ret.Get(0).(func(book.CreateBookInput, int) book.Book); ok {
		r0 = rf(input, bookID)
	} else {
		r0 = ret.Get(0).(book.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.CreateBookInput, int) error); ok {
		r1 = rf(input, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBookCategory provides a mock function with given fields: input, bookID
func (_m *Service) UpdateBookCategory(input book.CreateBookInput, bookID int) ([]string, error) {
	ret := _m.Called(input, bookID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(book.CreateBookInput, int) []string); ok {
		r0 = rf(input, bookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.CreateBookInput, int) error); ok {
		r1 = rf(input, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: status
func (_m *Service) UpdateStatus(status book.GetBookStatusInput) (book.Book, error) {
	ret := _m.Called(status)

	var r0 book.Book
	if rf, ok := ret.Get(0).(func(book.GetBookStatusInput) book.Book); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(book.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.GetBookStatusInput) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
